<!DOCTYPE html>
<html>

<head>
  <title>Socket.IO chat</title>
  <style>
    body {
      margin: 0;
      padding-bottom: 3rem;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    }

    #form {
      background: rgba(0, 0, 0, 0.15);
      padding: 0.25rem;
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      display: flex;
      height: 3rem;
      box-sizing: border-box;
      backdrop-filter: blur(10px);
    }

    #input {
      border: none;
      padding: 0 1rem;
      flex-grow: 1;
      border-radius: 2rem;
      margin: 0.25rem;
    }

    #input:focus {
      outline: none;
    }

    #form>button {
      background: #333;
      border: none;
      padding: 0 1rem;
      margin: 0.25rem;
      border-radius: 3px;
      outline: none;
      color: #fff;
    }

    #messages {
      list-style-type: none;
      margin: 0;
      padding: 0;
    }

    #messages>li {
      padding: 0.5rem 1rem;
    }

    #messages>li:nth-child(odd) {
      background: #efefef;
    }
  </style>
</head>

<body>
  <h1>
    <%= workSpace.name %>
  </h1>

  <% if(workSpace.users?.length> 0){ %>
    <% workSpace.users.forEach(user=>{ %>

      <button onclick="getDirectMessage('<%= user.id %>')">
        <%= user.name %>
      </button>

      <% }) %>

        <% } %>

          <p>Invite Link: <%= inviteLink %>
          </p>

          <form action="/api/workspaces/<%=workSpace.id%>/create-channel" method="post">

            <label for="add-channel">Add Channel</label>
            <input type="text" name="channelName" id="">
            <button type="submit">Create</button>

          </form>

          <% if(workSpace.channels?.length> 0){ %>
            <% workSpace.channels.forEach(channel=>{ %>

              <button onclick="getChannel('<%= channel.id %>')">
                <%= channel.name %>
              </button>

              <% }) %>
                <% } else { %>


                  <button>Channel</button>
                  <button>Channel</button>
                  <button>Channel</button>

                  <% } %>



                    <button id="sign-out-workspace" onclick="signOutWorkspace()">Sign Out From Workspace</button>

                    <ul id="messages"></ul>
                    <form id="form" action="">
                      <input id="input" autocomplete="off" /><button onclick="getSender()">Send</button>
                    </form>
</body>
<script src="https://cdn.socket.io/4.0.1/socket.io.min.js"></script>
<script>
  var socket = io();
  var messages = document.getElementById('messages');
  var form = document.getElementById('form');
  var input = document.getElementById('input');
  let channelId;
  let sender;
  let isChannelMessage = true;
  let receiverId;

  form.addEventListener('submit', function (e) {
    e.preventDefault();
    if (input.value) {

      if (isChannelMessage) {

        const url = process.env.NODE_ENV == 'production'
          ? `https://slack-like-app.herokuapp.com/api/messages/create` : `http://localhost:3000/api/messages/create`;

        fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            text: input.value,
            channelId: channelId
          })
        }).then(response => {
          if (response.status !== 200) {
            console.log('Looks like there was a problem. Status Code: ' +
              response.status);
            return;
          } else if (response.ok) {
            socket.emit('chat message', input.value);
            input.value = '';
          }
        });


      } else if (!isChannelMessage) {

        const url = process.env.NODE_ENV == 'production'
          ? `https://slack-like-app.herokuapp.com/api/direct-messages/send` : `http://localhost:3000/api/direct-messages/send`;

        fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            text: input.value,
            receiverId: receiverId
          })
        }).then(response => {
          if (response.status !== 200) {
            console.log('Looks like there was a problem. Status Code: ' +
              response.status);
            return;
          } else if (response.ok) {
            socket.emit('chat message', input.value);
            input.value = '';
          }
        });
      }
    } else {
      alert("Cannot send an empty message");
    }
  });

  socket.on('chat message', function (msg) {
    var item = document.createElement('li');
    item.textContent = `${msg}   -   ${sender}`;
    messages.appendChild(item);
    window.scrollTo(0, document.body.scrollHeight);
  });

  function getChannel(id) {
    const url = process.env.NODE_ENV == 'production'
      ? `https://slack-like-app.herokuapp.com/api/channels/${id}` : `http://localhost:3000/api/channels/${id}`;

    fetch(url, { method: 'GET' }).then(response => {
      if (response.status !== 200) {
        console.log('Looks like there was a problem. Status Code: ' +
          response.status);
        return;
      }
      if (response.ok) {
        response.json().then(json => {
          isChannelMessage = true;


          messages.replaceChildren();

          json.data.messages.forEach(message => {
            const item = document.createElement('li');
            item.textContent = `${message.text}   -   ${message.user.name} ${message.user.lastName}`;
            messages.appendChild(item);
            window.scrollTo(0, document.body.scrollHeight);
          });

          channelId = json.data.id;

        });
      }

      return;
    }).catch(err => {
      console.log('Fetch Error :-S', err);
    });;
  }


  function getDirectMessage(id) {
    const url = process.env.NODE_ENV == 'production'
      ? `https://slack-like-app.herokuapp.com/api/direct-messages/${id}` : `http://localhost:3000/api/direct-messages/${id}`;

    fetch(url, { method: 'GET' }).then(response => {

      if (response.status !== 200) {
        console.log('Looks like there was a problem. Status Code: ' +
          response.status);
        return;
      }
      if (response.ok) {
        response.json().then(json => {

          receiverId = id;

          isChannelMessage = false;

          messages.replaceChildren();

          json.data?.forEach(message => {
            const item = document.createElement('li');
            item.textContent = `${message.text}   -   ${message.sender.name} ${message.sender.lastName}`;
            messages.appendChild(item);
            window.scrollTo(0, document.body.scrollHeight);
          });

        });
      }

      return;
    }).catch(err => {
      console.log('Fetch Error :-S', err);
    });;
  }

  function getSender() {
    const url = process.env.NODE_ENV == 'production'
      ? `https://slack-like-app.herokuapp.com/api/users/me` : `http://localhost:3000/api/users/me`;

    fetch(url, {
      method: 'GET'
    }).then(response => {
      if (response.status !== 200) {
        console.log('Looks like there was a problem. Status Code: ' +
          response.status);
        return;
      }
      if (response.ok) {
        response.json().then(json => {
          sender = `${json.name} ${json.lastName}`;
        });
      }
      return;
    });
  }

  function signOutWorkspace() {
    const url = process.env.NODE_ENV == 'production'
      ? `https://slack-like-app.herokuapp.com/api/workspaces/signout-workspace` : `http://localhost:3000/api/workspaces/signout-workspace`;

    fetch(url, { method: 'GET' }).then(response => {
      if (response.status !== 200) {
        console.log('Looks like there was a problem. Status Code: ' +
          response.status);
        return;
      }
      window.location.assign('/app');
      return;
    }).catch(err => {
      console.log('Fetch Error :-S', err);
    });;

  }

</script>

</html>